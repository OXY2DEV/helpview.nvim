*helpview.nvim* Fancy decorations for vimdoc

                              Created by OXY2DEV

==============================================================================
Features                                                 *helpview-features*

- Decorated titles, headings, tags, tag-links, option-links, arguments and
  more!
- Supports horizontal rules!(not provided by vimdoc syntax)
- Decorated modeline.
- Dynamic colors based on the colorscheme(only for `tree-sitter` supported
  colorschemes).

==============================================================================
Requirements                                         *helpview-requirements*

- Neovim version `0.10.0` or higher.
- Tree-sitter parser for `vimdoc`.
- Nerd font.
- A tree-sitter supported colorscheme is also recommended.

==============================================================================
Installation                                              *helpview-install*

You can install `helpview.nvim` via your favourite plugin manager.

------------------------------------------------------------------------------
Lazy.nvim                                            *helpview-install-lazy*

Warning: This plugin doesn't need to be `lazy-loaded`.

For `lazy.lua` users.
>lua
	{
		"OXY2DEV/helpview.nvim",
		ft = "help",

		dependencies = {
			"nvim-treesitter/nvim-treesitter"
		}
	}
<

For `plugins/helpview.lua` users.
>lua
	return {
		"OXY2DEV/helpview.nvim",
		ft = "help",

		dependencies = {
			"nvim-treesitter/nvim-treesitter"
		}
	}
<
------------------------------------------------------------------------------
Mini.deps                                        *helpview-install-minideps*
>lua
	local MiniDeps = require("mini.deps");

	MiniDeps.add({
		source = "OXY2DEV/helpview.nvim",

		depends = {
			"nvim-treesitter/nvim-treesitter"
		}
	});
<
------------------------------------------------------------------------------
Others

Installation for other plugin managers are similar.
>vim
	Plug "nvim-treesitter/nvim-treesitter";
	Plug "OXY2DEV/helpview.nvim";
<

==============================================================================
Usage

The plugin will be automatically loaded when a help file is opened. You can
also toggle the plugin using commands.

------------------------------------------------------------------------------
Rendering                                               *helpview-rendering*

The plugin does 2 types of rendering,
	• Full render      Renders the entire buffer.
	• Partial render   Renders a specific part of the buffer.
	                   Note: This doesn't work if the buffer wasn't
					   fully rendered before.

Partial render is done when the buffer has more lines than {max_lines} or if
the buffer isn't |'modifiable'|. It is mainly for performance reasons.

Warning: Partial render can cause visual bugs from time to time.

------------------------------------------------------------------------------
Commands                                                 *helpview-commands*

The plugin provodes a single command with a few sub-commands. It also provides
completion for the various sub-commands including buffer ID completion for
ones that support it.

To toggle the plugin, run the following command.
>vim
	:Helpview
<
This command comes with the following sub-commands,

	• :toggleAll          Toggles the plugin.
	• :enableAll          Enables the plugin. Can be used to refresh the
	                      plugin.
	• :disableAll         Disables the plugin.
	• :toggle {buffer}    Toggles the plugin in the specified {buffer}.
	• :enable {buffer}    Enables the plugin in the specified {buffer}.
	• :disable {buffer}   Disables the plugin in the specified {buffer}.


==============================================================================
Setup                                                       *helpview-setup*

The plugin has the following setup table.

Note: Calling `setup()` is NOT necessary for the plugin.
>lua
	{
		---+ ##code##
		modes = { "n", "c" },
		buf_ignore = {},

		options = {
			on_modifiable = {},
			on_enable = {},

			on_disable = {}
		},

		highlight_groups = {},

		title = {
			enable = true,

			parts = {},
			hls = {},

			title_hl = "Title",
			description_hl = "Comment"
		},
		headings = {
			enable = true,

			heading_1 = {},
			heading_2 = {},
			heading_3 = {},
		},

		tags = {
			enable = true,

			corner_left = nil, corner_left_hl = nil,
			padding_left = " ", padding_left_hl = nil,

			icon = nil, icon_hl = nil,

			padding_right = " ", padding_right_hl = nil,
			corner_right = nil, corner_right_hl = nil,

			hl = "HelpviewTaglink"
		},

		-- These options have the same structure
		links = {},
		option_links = {},
		arguments = {},
		inline_codes = {},
		key_codes = {},

		code_blocks = {
			enable = true,

			hl = "HelpviewCodeBlocks"
			language_hl = "HelpviewCodeBlocksLanguage"
		},

		notes = {
			enable = true,

			default = {
				corner_left = nil, corner_left_hl = nil,
				padding_left = nil, padding_left_hl = nil,

				icon = "   ", icon_hl = nil,

				padding_right = " ", padding_right_hl = nil,
				corner_right = nil, corner_right_hl = nil,

				hl = "@comment.note"
			},

			-- The following options have similar structure
			warning = {},
			deprecated = {}
		},

		modelines = {
			enable = true,

			options = {
				{
					key = "spell",
					value = "false"
				}
			},

			icon_hl = "rainbow_4",
			selector_hl = "@function.builtin",
			surround_hl = "@conditional",

			option_hl = "Special"
		},
		---_
	}
<

MODES                                                     *helpview-o-modes*

A list of modes where the plugin will be active. Check |modes()| to see all
the possible values.

By default, the plugin will be active on `normal` & `command-line` mode.

BUF IGNORE                                           *helpview-o-buf_ignore*

List of buffer types to ignore. Possible values are mentioned in |'buftype'|.

MAX LINES                                             *helpview-o-max_lines*

The maximum number of lines a buffer can have for `full render`. If the line
count exceeds this number `partial render` is done to prevent performance
issues on low-end devices(e.g. Phones).

The default value is 1000.

Note: `Partial render` is done(except for when the buffer window is first
loaded) on |'nomodified'| buffers regardless of their line count.

RENDER LINES                                       *helpview-o-render_lines*

The maximum number of lines to do `partial render` on. The specified number of
lines above & below the current line will be re-rendered.

Default is the value of |'columns'|.

OPTIONS                                                 *helpview-o-options*

Buffer options to set for various states of the plugin.

	• {on_enable}           For when the plugin is enabled.
	• {on_disable}          For when the plugin is disabled.

The options are functions. They receive the {window_handle} and the
{buffer_handle} as parameters.

Usage ~
>lua
	options = {
		on_enable = function (window, buffer)
			-- This can be used for checking if a line is
			-- dangerously close to the textwidth.
			--
			-- Useful for finding lines that can potentially
			-- hinder the flow of the document
			if vim.bo[buffer].modifiable == true then
				vim.wo[window].colorcolumn = "+1";
			end
		end
	}
<

HIGHLIGHT GROUPS                               *helpview-o-highlight_groups*

Used for setting various highlight groups for the plugin. Highlight groups are
auto applied on the |ColorScheme| event.

Meant to be used for generating dynamic colors using `helpview.colors`.

------------------------------------------------------------------------------

Explained in more details in the |helpview-hls| section.

TITLES                                                   *helpview-o-titles*

Configuration table for the help file `titles`. Titles must follow the
following structure.
>text
	*Title* A description
<
Note: This only works for the first line of the document.


	• {enable}              When false, this feature isn't used.

	• {parts}               A list of 9 parts for making the border of the
                            title. It consists of the following parts, 

>text
	"top_left_corner",    "top_border",    "top_right_corner",
	"middle_left_corner", "padding",       "middle_right_corner",
	"bottom_left_corner", "bottom_border", "bottom_right_corner"
<

	• {hls}                 A list of 9 `highlight-groups` to color the 
	                        border of the title.

	• {title_hl}            Highlight group for coloring the title.
	• {description_hl}      Highlight group for coloring the description.

HEADINGS                                               *helpview-o-headings*

Configuration table for decorating `h1`, `h2` & `h3` elements in help files.

Options ~

	• {enable}              When false, this feature isn't used.

	• {heading_1}           Configuration table for `level 1 headings`.
	• {heading_2}           Configuration table for `level 2 headings`.
	• {heading_3}           Configuration table for `level 3 headings`.

Heading options ~

	• {style}               Style for the headings. Currently only supports
	                        `decorated`.

	• {parts}               A list of 9 parts for making the border of the
                            title. It consists of the following parts, 

>text
	"top_left_corner",    "top_border",    "top_right_corner",
	"middle_left_corner", "padding",       "middle_right_corner",
	"bottom_left_corner", "bottom_border", "bottom_right_corner"
<
	• {hls}                 A list of 9 `highlight-groups` to color the
	                        border of the title.

==============================================================================

The following options provide `statusline-like` parts to decorate various
inline elements.

Warning: This may disrupt the flow of the document.

INLINE ELEMENTS                                   *helpview-inline-elements*
               *helpview-o-tags* *helpview-o-links* *helpview-o-option-links*
       *helpview-o-arguments* *helpview-o-inline_codes* *helpview-o-keycodes*

Inline elements have the following structure for adding decorations.
>text
	█▒ ▣ Text▒█───── Corner right
	││└┬┘└┬┬┘└────── Padding right
	││ │  └┴──────── Text
	││ └──────────── Icon
	│└────────────── Padding left
	└─────────────── Corner left

<

Options ~

	• {enable}              When false, this feature isn't used.

	• {corner_left}         Text for the left corner.
	• {corner_left_hl}      Highlight group for {corner_left}.

	• {padding_left}        Text for the left padding.
	• {padding_left_hl}     Highlight group for {padding_left}.

	• {icon}                Icon for the element.
	• {icon_hl}             Highlight group for {icon}.

	• {padding_right}       Text for the right padding.
	• {padding_right_hl}    Highlight group for {padding_right}.

	• {corner_right}        Text for the right corner.
	• {corner_right_hl}     Highlight group for {corner_right}.

	• {hl}                  Default highlight group for all the {_hl}
	                        options.

==============================================================================

CODE BLOCKS                                         *helpview-o-code_blocks*

Configuration table for code blocks in help files.

Options ~

	• {enable}              When false, this feature isn't used.

	• {hl}                  Highlight group for the code blocks.
	• {language_hl}         Highlight group for the language string in code
	                        blocks.

NOTES                                                     *helpview-o-notes*

Configuration table for the various `note` types in help files.

Options ~

	• {enable}              When false, this feature isn't used.

	• {default}             Default configuration table for notes. Used when
	                        a note doesn't have a configuration table.

	                        Has the options of |helpview-inline-elements|.

	• {...}                 When the key name matches the text in the note
	                        it's corresponding value is used.

	                        Note: The key name is NOT case-sensitive.

MODELINES                                              *helpview-o-modelines*

Configuration table for showing the modeline string.

Options ~

	• {enable}              When false, this feature isn't used.

	• {options}             Experimental option for handling options without
	                        values.

	• {icon_hl}             Highlight group for the modeline icon.
	• {selector_hl}         Highlight group for the selector text.
	• {surround_hl}         Highlight group for the `{}`.

HORIZONTAL RULES                                             *helpview-o-hrs*

Configuration table for the `horizontal rules`.

Note: Horizontal rules aren't supported by vimdoc so edge cases may not
be captured by the plugin.

Options ~

	• {enable}              When false, this feature isn't used.

	• {parts}               A list of parts for making the horizontal rules.

Parts ~

There are currently 2 types of parts available,
	• repeating
	• text

Parts are identified using the {type} option.
>lua
	{ -- A valid part
		type = "repeating" 

		repeat_amount = 5,
		text = "-", hl = "Special"
	},
	{ -- An invalid part
		text = "Some text",
		hl = "Normal"
	}
<

Part: repeating ~

Repeats the provided text a certain number of times. It supports the following
options.

	• {repeat_amount}       The number of times to repeat {text}. Can also be
	                        a function.
							The function will receive a table with the
							following keys,
                              • `width`, The |'textwidth'| of the file.
							  • `width`, The width of the current window.

	• {text}                Text to repeat.
	• {hl}                  List of highlight groups to color {text}.
	• {direction}           The side of text where the coloring should
	                        begin. Possible values,
                              • left
	                          • right

Example usage,
>lua
	{
		type = "repeating",
		repeat_amount = function (info)
			-- We will use some text that are 3 cells wide between
			-- 2 repeating parts
			return math.floor((info - 3) / 2);
		end,

		text = "─",

		-- Highlight groups are going to be applied to the right
		-- side of the final text
		direction = "right"
		hls = { "Gradient1", "Gradient2", "Gradient3", "Gradient4" }
	}
<

Part: text ~

Directly shows some text, optionally with a highlight group.

	• {text}                Text to show.
	• {hl}                  Highlight group for text.

Example usage,
>lua
	{
		type = "text",

		text = " o ",
		hl = "Special"
	}
<

==============================================================================
Highlight groups                                              *helpview-hls*

Highlight groups are used by the plugin to color various parts of the
document. Though the plugin provides some default highlight groups, it is
recommended that you use your own highlight groups(either from your config
files or from some colorscheme/color-related plugins).

The plugin comes with the following highlight groups.

	• $HelpviewInlineCodes$                            *helpview-hl-InlineCodes*

	  When |'bg'| is dark:

	  25% fg color of $TablineSel$ & 15% bg color of $Normal$ is used for the
	  background color.

	  When |'bg'| is light:

	  50% fg color of $TablineSel$ and 65% bg color of $Normal$ is used for
	  the background color.

	  Foreground color is inherited from $TablineSel$ group.

	• $HelpviewTaglink$                                    *helpview-hl-Taglink*

	  When |'bg'| is dark:

	  25% fg color of $Title$ & 15% bg color of $Normal$ is used for the
	  background color.

	  When |'bg'| is light:

	  50% fg color of $Title$ and 65% bg color of $Normal$ is used for
	  the background color.

	  Foreground color is inherited from $Title$ group.

	• $HelpviewOptionlink$                              *helpview-hl-Optionlink*

	  When |'bg'| is dark:

	  25% fg color of $Tag$ & 15% bg color of $Normal$ is used for the
	  background color.

	  When |'bg'| is light:

	  50% fg color of $Tag$ and 65% bg color of $Normal$ is used for
	  the background color.

	  Foreground color is inherited from $Tag$ group.

	• $HelpviewMentionlink$                            *helpview-hl-Mentionlink*

	  Foreground color is inherited from $Tag$ group.

	  An underline is added.

	• $HelpviewCodeBlocks$                              *helpview-hl-CodeBlocks*
	  
	  125% bg color of $Normal$ is used for the background color.

	• $HelpviewCodeBlocksLanguage$              *helpview-hl-CodeBlocksLanguage*

	  125% bg color of $Normal$ is used for the background color.

	  Foreground color is inherited from $TablineSel$ group.

	• $HelpviewGradient1$                                 *helpview-hl-Gradient*
	  $HelpviewGradient2$
	  $HelpviewGradient3$
	  $HelpviewGradient4$
	  $HelpviewGradient5$
	  $HelpviewGradient6$
	  $HelpviewGradient7$
	  $HelpviewGradient8$
	  $HelpviewGradient9$
	  $HelpviewGradient10$

	  A 2-stop gradient between the background color of $NormalR and the
	  foreground color of $TablineSel$.

------------------------------------------------------------------------------
Setting highlight groups                                 *helpview-hl-usage*

The {highlight_groups} option is used to sst various highlight groups. These
highlight groups are re-applied on the |ColorScheme| event.

It is a list containing various highlight groups. Each item in this list must
have a {group_name} and a {value}.
>lua
	highlight_groups = {
		{
			group_name = "hl1",
			value = { fg = "red" }
		}
	}
<
They are then passed to |nvim_set_hl()|.

Items can also have an {output} key. In this case the value of {output} should
be a `function` and the result should be a `list` of tables containing
{group_name} and {value}.
>lua
	highlight_groups = {
		{
			output = function ()
				return {
					{
						group_name = "hl2",
						value = { bg = "blue" }
					},
					{
						group_name = "hl3",
						value = { bg = "green" }
					},
				}
			end
		}
	}
<
The {value} can also be a `function`. In this case, it should return a table
containing values supported by the {opts} key in |nvim_set_hl()|.
>lua
	highlight_groups = {
		group_name = "hl4",
		value = function ()
			return { fg = "#cdd6f4", bg = "#1e1e2e" }
		end
	}
<
All the highlight groups will by default have `Helpview` added before their
group name.

However, you can override this behavior by setting the {raw} key to `true`.
>lua
	highlight_groups = {
		{ -- Results in: HelpviewHl5
			group_name = "hl5",
			value = { bg = "white" }
		},
		{ -- Results in: Hl6
			raw = true,

			group_name = "hl6",
			value = { bg = "black" }
		},
	}
<
You can use the various helper functions(mentioned in |helpview-hl-helpers|)
to dynamically generate colors based on the colorscheme.

Note: You need to add fallback colors for `transparent` colorschemes as
they don't have a color set for the $Normal$ highlight group

------------------------------------------------------------------------------
Helper functions                                       *helpview-hl-helpers*

The plugin comes with a few helper functions to easily create Dynamic
|highlight-groups|.

Color related helper functions can be used either through `helpview.colors` or
by requiring the file Directly.
>lua
	local helpview = require("helpview");
	vim.print(helpview.colors.get_hl_value(0, "Special", "fg"));
<
------------------------------------------------------------------------------

                                                       *helpview-helpers-lerp*
colors.lerp({x}: number, {y}: number, {t}: number) -> number

	The mising `math.lerp()` function. Does `linear interpolation` between
	x & y.

	Parameters: ~

		• {x}   The start value.
		• {y}   The stop/end value.
		• {t}   A float between 0.00 & 1.00 to interpolate to.

	Result: ~

		• {number} The interpolated value.

                                                      *helpview-helpers-clamp*
colors.clamp({value}: number, {min}: number, {max}: number) -> number

	The mising `math.clamp()` function. Clamps a value between min & max.

	Parameters: ~

		• {value}   The value to clamp.
		• {min}     Minimum value.
		• {max}     Maximum value.
           
	Result: ~

		• {number} The clamped value.

                                                 *helpview-helpers-num_to_hex*
colors.num_to_hex({num}: number) -> string

	Turns numbers into hexadecimal string. A `#` is added before the
	output string.

	Used for converting |'guifg'|, |'guibg'| & |'guisp'| values provided
	by |nvim_get_hl()| into human readable colors.

	Parameters: ~

		• {num}   Number to turn into hexadecimal.

		          Warning: Small decimal values may not be correctly
				  converted.

	Result: ~
		• {string}  The converted hexadecimal color.

                                                 *helpview-helpers-num_to_rgb*
colors.num_to_rgb({num}: number) -> { r: number, g: number, b: number }

	Sperates color numbers into r, g, b values.

	Rarely used for translating outputs of |nvim_get_hl()|.

	Parameters: ~
		• {num}   Number to seperate.

	Result: ~
		• {table} Table containing r, g, b values.

                                                 *helpview-helpers-hex_to_rgb*
colors.hex_to_rgb({str}: string) -> { r: number, g: number, b: number }

	Seperates hex color codes to r, g, b colors.

	Supports codes with or without `#` in front of them. Also supports 
	`3-digit` & `6-digit` hex color codes.

	Parameters: ~
		• {str}   Hexadecimal string to seperate.

	Result: ~
		• {table} Table containing r, g, b values.

                                                 *helpview-helpers-rgb_to_hex*
colors.rgb_to_hex({ {r}: number, {g}: number, {b}: number }) -> string

	Turns table containing r, g, b values into valid hex color codes.

	Used internally for transforming color values.

	Parameters: ~
		• {tbl}   A table containing r, g, b values.

	Result: ~
		• {table} 6-digit hex color code.

                                               *helpview-helpers-get_hl_value*
colors.get_hl_value({ns_id}: number, {hl_group}: string, {value}: string)
	-> any

	A wrapper function for |nvim_get_hl()|.

	Gets {value} of {hl_group} in the provided {ns_id}. If {value} is `fg`,
	`bg` or `sp` the returned value will be a table containing the r, g, b
	values. Otherwise the value is directly returned.

	Parameters: ~
		• {ns_id}      Namespace ID. See |namespace| for more information.
		• {hl_group}   Highlight group name.
		• {value}      The value to return.
	
	Result: ~
		• {any}        Any of the value returned by |nvim_get_hl()|.

                                             *helpview-helpers-create_gradient*
colors.create_gradient(
	{name_prefix}: string,

	{from}: color,
	{to}: color,

	{steps}: number,
	{mode}: string
) -> { {group_name}: string, {value}: table }

	Creates a list of `highlight groups` for the {highlight_groups} option.

	A 2-stop gradient is generated between {from} & {to}. The value of
	{from} & {to} can either be a number, string or a table with r, g, b
	values.

	The {mode} can be used to make the gradient into the background color or
	the foreground color or both.

	Parameters: ~
		• {name_prefix}   The prefix to add before each of the {group_name}.

		                  E.g. setting the {name_prefix} to "Gradient" will
						  result in group names being "Gradient<n>" where
						  "<n>" is the step number.

		• {from}          The start color of the gradient. Can be a number,
		                  a string or a table. It will be converted to a
						  table containing r, g, b values.
		• {to}            The stop color of the gradient. Works like {from}.

		• {steps}         Number of steps in the gradient(including the start
		                  and stop colors).
		• {mode}          The color mode of the gradient. Possible values are,
		                      • bg: Applies the color to the background.
		                      • fg: Applies the color to the foreground.
							  • both: Does all of the above.

	Result: ~
		• {table}         A list of tables containing a {group_name} and a
		                  {value}. Mainly for use in {highlight_groups}.

colors.mix(
	{color_1}: color, {color_2}: color,
	{per_1}: number, {per_2}: number
) -> string

	Mixes {color_1}, {color_2} to create a new color.

	The value of {color_1} & {color_2} can either be a number, string
	or a table with r, g, b values.

	The {per_1} & {per_2} are floats between 0 & 1. They are used as % values
	of the r, g, b values of the corresponding color. They are then added
	together to make the new color.

	Parameters: ~
		• {color_1}       The first color to mix. Can be a number,
		                  a string or a table. It will be converted to a
						  table containing r, g, b values.
		• {color_2}       The stop color of the gradient. Works like {color_1}.

		• {per_1}         The % of {color_1} to mix.
		• {per_2}         The % of {color_2} to mix.

	Result: ~
		• {string}        The hex color code of the resulting color.

vim:ft=help:bt=help:textwidth=78:ts=4:nospell:

