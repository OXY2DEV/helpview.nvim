üìñ *helpview.nvim*                  An experimental vimdoc decorator for Neovim


                           ‚ï¶ ‚ï¶‚îå‚îÄ‚îê‚î¨  ‚îå‚îÄ‚îê‚î¨  ‚î¨‚î¨‚îå‚îÄ‚îê‚î¨ ‚î¨
                           ‚ï†‚ïê‚ï£‚îú‚î§ ‚îÇ  ‚îú‚îÄ‚îò‚îî‚îê‚îå‚îò‚îÇ‚îú‚î§ ‚îÇ‚îÇ‚îÇ
                           ‚ï© ‚ï©‚îî‚îÄ‚îò‚î¥‚îÄ‚îò‚î¥   ‚îî‚îò ‚î¥‚îî‚îÄ‚îò‚îî‚î¥‚îò.nvim

                                 By `OXY2DEV`

==============================================================================
Features                                             *helpview.nvim-features*

	‚Ä¢ Decorations for various `vimdoc` syntaxes!
	‚Ä¢ Dynamic highlight groups to support a wide range of colorschemes!
	‚Ä¢ Previewing as you type!
	‚Ä¢ Performant even on large files!
	‚Ä¢ Supports modelines too!

==============================================================================
Requirements                                     *helpview.nvim-requirements*

	‚Ä¢ Neovim version `0.10.0` or higher.
	‚Ä¢ Tree-sitter parser for `vimdoc`.
	‚Ä¢ Nerd font.

Optional:
	‚Ä¢ A `tree-sitter` supported colorscheme is also recommended.

==============================================================================
Installation                                          *helpview.nvim-install*

You can install `helpview.nvim` via your favourite plugin manager!

------------------------------------------------------------------------------
üí§ Lazy.nvim                                           *helpview.nvim-i-lazy*

Warning: It is not recommended to `lazy-load` this plugin.

For `lazy.lua` users.
>lua
	{
		"OXY2DEV/helpview.nvim",
		lazy = false,    -- Recommended
		-- ft = "help",  -- In case you still want to lazy load

		dependencies = {
			"nvim-treesitter/nvim-treesitter"
		}
	}
<
For `plugins/helpview.lua` users.
>lua
	return {
		"OXY2DEV/helpview.nvim",
		lazy = false,    -- Recommended
		-- ft = "help",  -- In case you still want to lazy load

		dependencies = {
			"nvim-treesitter/nvim-treesitter"
		}
	}
<
------------------------------------------------------------------------------
ü¶† Mini.deps                                       *helpview.nvim-i-minideps*
>lua
	local MiniDeps = require("mini.deps");

	MiniDeps.add({
		source = "OXY2DEV/helpview.nvim",

		depends = {
			"nvim-treesitter/nvim-treesitter"
		}
	});
<
------------------------------------------------------------------------------
ü§î Others

Installation process via other plugin managers are similar.
>vim
	Plug "nvim-treesitter/nvim-treesitter";
	Plug "OXY2DEV/helpview.nvim";
<
------------------------------------------------------------------------------
üöÄ Commands                                          *helpview.nvim-commands*

The plugin provides a single command with a few sub-commands. It also 
provides completion for the various sub-commands.

To toggle the plugin, run the following command.
>vim
	:Helpview
<
This command comes with the following sub-commands,

	‚Ä¢ toggleAll          Toggles the plugin.
	‚Ä¢ enableAll          Enables the plugin. Can be used to refresh the
	                     plugin.
	‚Ä¢ disableAll         Disables the plugin.
	‚Ä¢ toggle {buffer}    Toggles the plugin in the specified {buffer}.
	‚Ä¢ enable {buffer}    Enables the plugin in the specified {buffer}.
	‚Ä¢ disable {buffer}   Disables the plugin in the specified {buffer}.

------------------------------------------------------------------------------
üé® Highlight groups                                       *helpview.nvim-hls*

Helpview.nvim comes with the following highlight groups.

Title ~

Used for the title.

	‚Ä¢ $Helpviewtitle$, from `DiagnosticWarn`.

Headings ~

Used for the different heading levels.

	‚Ä¢ $HelpviewHeading1$, from `DiagnosticOk`.
	‚Ä¢ $HelpviewHeading2$, from `DiagnosticInfo`.
	‚Ä¢ $HelpviewHeading3$, from `DiagnosticHint`.
	‚Ä¢ $HelpviewHeading4$, from `Special`.

Code blocks ~

Used by code blocks.

	‚Ä¢ $HelpviewCode$, from `Normal`.
	‚Ä¢ $HelpviewCodeLanguage$, from `Comment`.

Inline codes ~

	‚Ä¢ $HelpviewInlineCode$, from `@markup.raw.vimdoc`.

Horizontal rules ~

	‚Ä¢ $HelpviewGradient1$, from `Normal`.
	‚Ä¢ $HelpviewGradient2$
	‚Ä¢ $HelpviewGradient3$
	‚Ä¢ $HelpviewGradient4$
	‚Ä¢ $HelpviewGradient5$
	‚Ä¢ $HelpviewGradient6$
	‚Ä¢ $HelpviewGradient7$
	‚Ä¢ $HelpviewGradient8$
	‚Ä¢ $HelpviewGradient9$
	‚Ä¢ $HelpviewGradient10$, from `Tag`.

Others ~

	‚Ä¢ $HelpviewTaglink$, from `Title`.
	‚Ä¢ $HelpviewOptionlink$, from, `Tag`.
	‚Ä¢ $HelpviewMentionlink$, from `Title`.

=============================================================================
üöÄ Plugin configuration                                *helpview.nvim-config*

>lua
	{
		-- buftypes to ignore
		buf_ignore = {},

		-- Modes where the plugin is enabled
		modes = {},
		-- Modes where "hybrid_mode" is used
		hybrid_modes = {},

		-- Functions to call on various events
		callbacks = {
			-- When plugin is enabled
			on_enable = nil,
			-- When plugin is disabled
			on_disable = nil,

			-- When mode changes
			on_mode_change = nil
		},

		-- Rendering configuration
		arguments = {},          -- {arg}
		code_blocks = {},
		group_names = {},        -- $Group$
		headings = {},
		horizontal_rules = {},
		inline_codes = {},       -- `code`
		keycodes = {},           -- <ESC>
		mention_links = {},      -- |link|
		modelines = {},          -- vim:
		notes = {},              -- Note:
		option_links = {},       -- 'option'
		tag_links = {},          -- <tag>
		title = {}
	}
<

arguments ~
>lua
	arguments = {
		enable = true,            -- For toggling this feature

		padding_left = "",       -- Padding for the left side
		padding_right = "",      -- Padding for the right side

		icon = "Û∞Çñ ",              -- Icon to use
		hl = "Argument"           -- Highlight group
	}
<
code_blocks ~
>lua
	code_blocks = {
		enable = true,

		hl = "Code",              -- Highlight group for the code block
		language_hl = "CodeLang"  -- Highlight group for the language name
	}
<
group_names ~
>lua
	group_names = {
		enable = true,

		padding_left = "",       -- Padding for the left side
		padding_right = "",      -- Padding for the right side

		icon = "Û∞èò "              -- Icon for the hl group name
	}
<
headings ~
>lua
	headings = {
		enable = true,

		heading_1 = {},
		heading_2 = {},
		heading_3 = {},
		heading_4 = {},
	}
<
Each of the headings have the following structure,
>lua
	heading_1 = {
		hl = "H1",              -- Highlight group name
		marker = "‚ïê",           -- Marker to show above the heading
		sign = "ÔÅ¨ "             -- Icon to show on the heading
	}
<
horizontal_rules ~
>lua
	horizontal_rules = {
		enable = true,
		parts = {}              -- Parts to make the HR
	}
<

There are 2 types of parts,

	‚Ä¢ repeating

      Repeats the given text.
>lua
		{
			type = "simple",
			text = "‚Ä¢",
			repeat_amount = 10,

			direction = "left",
			hl = { "Gradient1", "Gradient2" }
		}
<
	  It has the following options.

		‚Ä¢ {text}, the text to repeat.
		‚Ä¢ {repeat_amount}, the number of times to repeat the text.
		  If the value is a function then the result is used.
		‚Ä¢ {direction}, the direction from which {hl} is applied from.
		  When `left` it is applied from the left side and when `right` it
		  is applied from the right side.
		‚Ä¢ {hl}, Highlight group(s) to apply can either be a string or a list
		  of highlight groups.

	‚Ä¢ text

	  Shows some text.
>lua
		{
			type = "text",
			text = " ÓüÖ ",
			hl = "Title"
		}
<
	  It has the following options.

		‚Ä¢ {text}, the text to show.
		‚Ä¢ {hl}, Highlight group to apply to the text.

inline_codes ~
>lua
	inline_codes = {
		enable = true,            -- For toggling this feature

		padding_left = " ",       -- Padding for the left side
		padding_right = " ",      -- Padding for the right side

		icon = "",                -- Icon to use
		hl = "InlineCode"         -- Highlight group
	}
<
keycodes ~
>lua
	keycodes = {
		enable = true,            -- For toggling this feature

		padding_left = "",        -- Padding for the left side
		padding_right = "",       -- Padding for the right side

		icon = "Û∞åå ",              -- Icon to use
		hl = "Special"            -- Highlight group
	}
<
mention_links ~
>lua
	mention_links = {
		enable = true,            -- For toggling this feature

		padding_left = "",        -- Padding for the left side
		padding_right = "",       -- Padding for the right side

		icon = "Ó¨ï ",              -- Icon to use
		hl = "Mentionlink"        -- Highlight group
	}
<
modelines ~

Note: This is just a joke feature btw. üòê
>lua
	modelines = {
		enable = true,           -- For toggling this feature

		style = "expanded",      -- Style of the modeline

		icon = "ÓüÖ ",             -- Icon to use for the selector
		selector = ".vim",       -- Text to use as the selector
	}
<
There are currently 2 styles available,

	‚Ä¢ minimal, uses a single line to show everything.
	‚Ä¢ expanded, uses a new line for every option.

notes ~
>lua
	notes = {
		enable = true,            -- For toggling this feature

		-- Default configuration
		default = {
			padding_left = nil,
			padding_right = " ",

			icon = "ÔÅÄ ",
			hl = "@comment.note"
		},

		-- You can also use the notes text as the key to change it's
		-- configuration
		warning = {
			padding_left = " ",
			padding_right = " ",

			icon = "ÔÅ± ",
			hl = "@comment.warn"
		}
	}
<
option_links ~
>lua
	option_links = {
		enable = true,            -- For toggling this feature

		padding_left = " ",       -- Padding for the left side
		padding_right = " ",      -- Padding for the right side

		icon = "Ó∞ê ",              -- Icon to use
		hl = "Optionlink"         -- Highlight group
	}
<
tag_links ~
>lua
	tag_links = {
		enable = true,            -- For toggling this feature

		padding_left = " ",       -- Padding for the left side
		padding_right = " ",      -- Padding for the right side

		icon = "",                -- Icon to use
		hl = "Taglink"            -- Highlight group
	}
<
title ~
>lua
	title = {
		style = "simple",         -- Name of the rendering style

		parts = {},               -- Parts of the border when style is
								  -- decorated
		hl = "Title",             -- Highlight group for the title
	}
<
	‚Ä¢ {style}, Name of the style to use.

	  Currently available styles are.

		‚Ä¢ simple

		  Adds simple background color and icons!
>lua
			{
				style = "simple",

				hl = "Title",
				icon = "ÓöÆ "
			}
<
		‚Ä¢ decorated

		  Adds border to the title.
>lua
			{
				style = "decorated",

				parts = {
					"‚ï≠", "‚îÄ", "‚ïÆ",
					"‚îÇ", " ", "‚îÇ",
					"‚ï∞", "‚îÄ", "‚ïØ"
				},
				hl = "Title"
			}
<
vim:ft=help:nospell:tw=78:
